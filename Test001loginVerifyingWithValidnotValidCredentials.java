package io.testproject.generated.tests.syndic8regression;

import io.testproject.sdk.drivers.ReportingDriver;
import io.testproject.sdk.drivers.web.RemoteWebDriver;
import io.testproject.sdk.interfaces.junit5.ExceptionsReporter;
import java.lang.AssertionError;
import java.lang.Exception;
import java.lang.Override;
import java.lang.RuntimeException;
import java.lang.String;
import java.util.concurrent.TimeUnit;
import java.util.stream.Stream;
import org.junit.jupiter.api.AfterAll;
import org.junit.jupiter.api.BeforeAll;
import org.junit.jupiter.api.DisplayName;
import org.junit.jupiter.params.ParameterizedTest;
import org.junit.jupiter.params.provider.Arguments;
import org.junit.jupiter.params.provider.MethodSource;
import org.openqa.selenium.By;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.chrome.ChromeOptions;

/**
 * This class was automatically generated by TestProject
 * Project: Syndic8 Regression
 * Test: 001Login - Verifying with Valid/Not Valid credentials
 * Generated by: Maksym Agaponov (sfmaksymwork@gmail.com)
 * Generated on Fri Aug 26 11:50:16 GMT 2022.
 */
@DisplayName("001Login - Verifying with Valid/Not Valid credentials")
public class Test001loginVerifyingWithValidnotValidCredentials implements ExceptionsReporter {
  public static WebDriver driver;

  @BeforeAll
  static void setup() throws Exception {
    driver = new RemoteWebDriver("2FcW-oxQJKcIsVgOFW0ZlrJA2JjivR3Cze6bmBwGx4o", new ChromeOptions(), "Maksym Agaponov");
  }

  /**
   * In order to upload the test to TestProject need to un-comment @ArgumentsSource and set in comment the @MethodSource
   * @org.junit.jupiter.params.provider.ArgumentsSource(io.testproject.sdk.interfaces.parameterization.TestProjectParameterizer.class) */
  @DisplayName("001Login - Verifying with Valid/Not Valid credentials")
  @ParameterizedTest
  @MethodSource("provideParameters")
  void execute(String ApplicationURL) throws Exception {
    // set timeout for driver actions (similar to step timeout)
    driver.manage().timeouts().implicitlyWait(15000, TimeUnit.MILLISECONDS);
    By by;
    boolean booleanResult;

    // 1. Navigate to '{{ApplicationURL}}'
    //    Navigates the specified URL (Auto-generated)
    try {
      driver.navigate().to(ApplicationURL);
    }
    catch (AssertionError | RuntimeException ex) {
      getDriver().report().step("Step 'Navigate to '~?~ApplicationURL~?~'' failed", ex.getMessage(), false, false);
      // FailureBehaviorType is continue test in case of failure
    }

    // 2. Click 'Log In'
    try {
      by = By.xpath("//span[. = 'Log In']");
      driver.findElement(by).click();
    }
    catch (AssertionError | RuntimeException ex) {
      getDriver().report().step("Step 'Click 'Log In'' failed", ex.getMessage(), false, false);
      // FailureBehaviorType is continue test in case of failure
    }

    // 3. Click 'Email can't be blank'
    try {
      by = By.xpath("//div[2]/div[. = concat('Email can', \"'\", 't be blank')]");
      driver.findElement(by).click();
    }
    catch (AssertionError | RuntimeException ex) {
      getDriver().report().step("Step 'Click 'Email can't be blank'' failed", ex.getMessage(), false, false);
      // FailureBehaviorType is continue test in case of failure
    }

    // 4. Is 'Email can't be blank' visible?
    try {
      by = By.xpath("//div[2]/div[. = concat('Email can', \"'\", 't be blank')]");
      driver.findElement(by).isDisplayed();
    }
    catch (AssertionError | RuntimeException ex) {
      getDriver().report().step("Step 'Is 'Email can't be blank' visible?' failed", ex.getMessage(), false, false);
      // FailureBehaviorType is continue test in case of failure
    }

    // 5. Click 'Password can't be blank'
    try {
      by = By.xpath("//div[2]/div/div/div[. = concat('Password can', \"'\", 't be blank')]");
      driver.findElement(by).click();
    }
    catch (AssertionError | RuntimeException ex) {
      getDriver().report().step("Step 'Click 'Password can't be blank'' failed", ex.getMessage(), false, false);
      // FailureBehaviorType is continue test in case of failure
    }

    // 6. Is 'Password can't be blank' visible?
    try {
      by = By.xpath("//div[2]/div/div/div[. = concat('Password can', \"'\", 't be blank')]");
      driver.findElement(by).isDisplayed();
    }
    catch (AssertionError | RuntimeException ex) {
      getDriver().report().step("Step 'Is 'Password can't be blank' visible?' failed", ex.getMessage(), false, false);
      // FailureBehaviorType is continue test in case of failure
    }

    // 7. Click 'email'
    try {
      by = By.cssSelector("[id = '1-email']");
      driver.findElement(by).click();
    }
    catch (AssertionError | RuntimeException ex) {
      getDriver().report().step("Step 'Click 'email'' failed", ex.getMessage(), false, false);
      // FailureBehaviorType is continue test in case of failure
    }

    // 8. Type 'sfmaksymwork@gmail.com' in 'email'
    try {
      by = By.cssSelector("[id = '1-email']");
      driver.findElement(by).sendKeys("sfmaksymwork@gmail.com");
    }
    catch (AssertionError | RuntimeException ex) {
      getDriver().report().step("Step 'Type 'sfmaksymwork@gmail.com' in 'email'' failed", ex.getMessage(), false, false);
      // FailureBehaviorType is continue test in case of failure
    }

    // 9. Click 'password'
    try {
      by = By.cssSelector("[name='password']");
      driver.findElement(by).click();
    }
    catch (AssertionError | RuntimeException ex) {
      getDriver().report().step("Step 'Click 'password'' failed", ex.getMessage(), false, false);
      // FailureBehaviorType is continue test in case of failure
    }

    // 10. Type '1' in 'password'
    try {
      by = By.cssSelector("[name='password']");
      driver.findElement(by).sendKeys("1");
    }
    catch (AssertionError | RuntimeException ex) {
      getDriver().report().step("Step 'Type '1' in 'password'' failed", ex.getMessage(), false, false);
      // FailureBehaviorType is continue test in case of failure
    }

    // 11. Click 'Log In'
    try {
      by = By.xpath("//span[. = 'Log In']");
      driver.findElement(by).click();
    }
    catch (AssertionError | RuntimeException ex) {
      getDriver().report().step("Step 'Click 'Log In'' failed", ex.getMessage(), false, false);
      // FailureBehaviorType is continue test in case of failure
    }

    // 12. Click 'Wrong email or password.'
    try {
      by = By.xpath("//span/span[. = 'Wrong email or password.']");
      driver.findElement(by).click();
    }
    catch (AssertionError | RuntimeException ex) {
      getDriver().report().step("Step 'Click 'Wrong email or password.'' failed", ex.getMessage(), false, false);
      // FailureBehaviorType is continue test in case of failure
    }

    // 13. Is 'Wrong email or password.' visible?
    try {
      by = By.xpath("//span/span[. = 'Wrong email or password.']");
      driver.findElement(by).isDisplayed();
    }
    catch (AssertionError | RuntimeException ex) {
      getDriver().report().step("Step 'Is 'Wrong email or password.' visible?' failed", ex.getMessage(), false, false);
      // FailureBehaviorType is continue test in case of failure
    }

    // 14. Click 'password'
    try {
      by = By.cssSelector("[name='password']");
      driver.findElement(by).click();
    }
    catch (AssertionError | RuntimeException ex) {
      getDriver().report().step("Step 'Click 'password'' failed", ex.getMessage(), false, false);
      // FailureBehaviorType is continue test in case of failure
    }

    // 15. Type '19902006vB.' in 'password'
    try {
      by = By.cssSelector("[name='password']");
      driver.findElement(by).sendKeys("19902006vB.");
    }
    catch (AssertionError | RuntimeException ex) {
      getDriver().report().step("Step 'Type '19902006vB.' in 'password'' failed", ex.getMessage(), false, false);
      // FailureBehaviorType is continue test in case of failure
    }

    // 16. Click 'email'
    try {
      by = By.cssSelector("[id = '1-email']");
      driver.findElement(by).click();
    }
    catch (AssertionError | RuntimeException ex) {
      getDriver().report().step("Step 'Click 'email'' failed", ex.getMessage(), false, false);
      // FailureBehaviorType is continue test in case of failure
    }

    // 17. Type 'ssfmaksymwork@gmail.com' in 'email'
    try {
      by = By.cssSelector("[id = '1-email']");
      driver.findElement(by).sendKeys("ssfmaksymwork@gmail.com");
    }
    catch (AssertionError | RuntimeException ex) {
      getDriver().report().step("Step 'Type 'ssfmaksymwork@gmail.com' in 'email'' failed", ex.getMessage(), false, false);
      // FailureBehaviorType is continue test in case of failure
    }

    // 18. Click 'submit'
    try {
      by = By.cssSelector("[name='submit']");
      driver.findElement(by).click();
    }
    catch (AssertionError | RuntimeException ex) {
      getDriver().report().step("Step 'Click 'submit'' failed", ex.getMessage(), false, false);
      // FailureBehaviorType is continue test in case of failure
    }

    // 19. Click 'Wrong email or password.'
    try {
      by = By.xpath("//span/span[. = 'Wrong email or password.']");
      driver.findElement(by).click();
    }
    catch (AssertionError | RuntimeException ex) {
      getDriver().report().step("Step 'Click 'Wrong email or password.'' failed", ex.getMessage(), false, false);
      // FailureBehaviorType is continue test in case of failure
    }

    // 20. Is 'Wrong email or password.1' visible?
    try {
      by = By.xpath("//div[2]/div[1]/div/div[. = 'Wrong email or password.']");
      driver.findElement(by).isDisplayed();
    }
    catch (AssertionError | RuntimeException ex) {
      getDriver().report().step("Step 'Is 'Wrong email or password.1' visible?' failed", ex.getMessage(), false, false);
      // FailureBehaviorType is continue test in case of failure
    }

    // 21. Click 'email'
    try {
      by = By.cssSelector("[id = '1-email']");
      driver.findElement(by).click();
    }
    catch (AssertionError | RuntimeException ex) {
      getDriver().report().step("Step 'Click 'email'' failed", ex.getMessage(), false, false);
      // FailureBehaviorType is continue test in case of failure
    }

    // 22. Type 'sfmaksymwork@gmail.com' in 'email'
    try {
      by = By.cssSelector("[id = '1-email']");
      driver.findElement(by).sendKeys("sfmaksymwork@gmail.com");
    }
    catch (AssertionError | RuntimeException ex) {
      getDriver().report().step("Step 'Type 'sfmaksymwork@gmail.com' in 'email'' failed", ex.getMessage(), false, false);
      // FailureBehaviorType is continue test in case of failure
    }

    // 23. Click 'submit'
    try {
      by = By.cssSelector("[name='submit']");
      driver.findElement(by).click();
    }
    catch (AssertionError | RuntimeException ex) {
      getDriver().report().step("Step 'Click 'submit'' failed", ex.getMessage(), false, false);
      // FailureBehaviorType is continue test in case of failure
    }

  }

  @Override
  public ReportingDriver getDriver() {
    return (ReportingDriver) driver;
  }

  @AfterAll
  static void tearDown() {
    if (driver != null) {
      driver.quit();
    }
  }

  private static Stream provideParameters() throws Exception {
    return Stream.of(Arguments.of("https://app.green.syndic8.io"));
  }
}
